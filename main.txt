--[[
BRIX: Stack to the Death, a multiplayer brick stacking game written for the Starfall addon in Garry's Mod.
Copyright (C) 2022  Connor Ashcroft

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program (see LICENSE.md).
If not, see <https://www.gnu.org/licenses/>.

This .txt file is actually a .lua file in disguise. It just makes it easier to deal with in Garry's Mod since it doesn't have permission to write to any file that isn't a .dat or .txt file.
]]
--@name BRIX 33: Stack to the Death
--@author mitterdoo
--@shared
--@include brix/client/main.lua
--@clientmain brix/client/main.lua
--@include brix/br/arena_sv.lua
--@superuser

require("brix/br/arena_sv.lua")

hook.add("net", "seating", function(name, len, ply)

    if name == "exitVehicle" and ply:inVehicle() then
        local v = ply:getVehicle()
        if hasPermission("vehicle.eject", v) then
            v:ejectDriver()
        end
    end

end)

local comps = chip():getLinkedComponents()
for _, ent in pairs(comps) do
    if ent:getClass() == "starfall_hud" then
        ent:setComponentLocksControls(true)
    end
end

local makeGame
makeGame = function()
    
    Arena = br.createArena()
    
    function Arena:preConnect(ply)
    
        return true
    end
    
    function Arena:onConnect(ply)
        print(ply:getName(), "has connected")
    end
    
    hook.add("net", "start", function(name, len, ply)
    
        if ply == owner() and name == "brixBegin" then
            print("server got")
            hook.remove("net", "start")
            Arena.lobbyTimer = timer.curtime() - 1
        end
    
    end)
    
    function Arena:onFinish()
        makeGame()
    end   
    
    Arena:open()

end
makeGame()
